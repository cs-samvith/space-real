trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - /quiz-service/src/*
      - /quiz-service/aks/*

pr: none

pool:
  vmImage: ubuntu-latest

variables:
  - group: acr
  - name: containerRegistry
    value: spacedevacr.azurecr.io
  - name: service_connection
    value: ARM_SERVICE_CONNECTION
  - name: kubernetesServiceConnection
    value: "spaceaks"
  - name: chartPath
    value: $(System.DefaultWorkingDirectory)/quiz-service/chart
  - name: chartName
    value: "quiz-service-chart"
  - name: tag
    value: "$(Build.BuildNumber)"
  - name: imageRepository
    value: "quiz-service-real"

stages:
  - stage: Build
    jobs:
      - job: Build
        steps:
          - task: PowerShell@2
            displayName: "Insert System Info"
            inputs:
              targetType: "inline"
              script: |
                $json='[{
                    "ApplicationName": "Service",
                    "CloudInfra": "aks",
                    "DevOpsTool": "devOps - helm charts",
                    "Environment": "dev",
                    "InstanceName": "cloud",
                    "ImageTag": "$(imageRepository):$(tag)"
                }]'
                $json | Out-File $(System.DefaultWorkingDirectory)/quiz-service/src/Quiz.Service/System/info.json
              workingDirectory: "$(System.DefaultWorkingDirectory)"
              pwsh: true # For Linux

          - task: Docker@2
            name: docker_build_and_push
            displayName: docker build and push
            inputs:
              containerRegistry: $(containerRegistry)
              repository: $(imageRepository)
              command: "buildAndPush"
              Dockerfile: "quiz-service/src/Quiz.Service/Dockerfile"
              tags: |
                latest
                $(tag)

          - task: HelmInstaller@0
            inputs:
              helmVersion: "3.9.4"
              installKubectl: true

          - bash: |
              # run helm lint
              helm lint $(System.DefaultWorkingDirectory)/quiz-service/chart
            displayName: "helm lint"
            failOnStderr: true

          - task: HelmDeploy@0
            inputs:
              command: "package"
              chartPath: "$(System.DefaultWorkingDirectory)/quiz-service/chart"
              chartVersion: $(tag)
              arguments: --app-version $(tag)

          - bash: |
              pwd 
              cd $(Build.ArtifactStagingDirectory)
              ls
              echo '$(ACR_PASSWORD)' | helm registry login $(containerRegistry) \
              --username $(ACR_USER_NAME) \
              --password-stdin
              helm push $(chartName)-$(tag).tgz oci://$(containerRegistry)/space

          - task: PublishBuildArtifacts@1
            displayName: "Publish client artifacts"
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)/$(chartName)-$(tag).tgz
              artifactName: Chart

          # - task: HelmDeploy@0
          #   displayName: Helm upgrade
          #   inputs:
          #     connectionType: "Kubernetes Service Connection"
          #     kubernetesServiceConnection: $(kubernetesServiceConnection)
          #     command: upgrade
          #     chartType: filepath
          #     chartPath: $(Build.ArtifactStagingDirectory)/$(chartName)-$(tag).tgz
          #     releaseName: helm-quiz-service
          #     install: true
          #     waitForExecution: false
          #     overrideValues: image.tag=$(tag)
          #     namespace: dev

  - stage: Dev
    dependsOn:
      - build
    jobs:
      - job: Deploy
        displayName: "Deploy Dev"
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "download chart artifacts"
            inputs:
              artifact: Chart
              path: "$(System.ArtifactsDirectory)/chart"
          - bash: |
              pwd
              cd $(System.ArtifactsDirectory)/chart
              ls
          - task: HelmDeploy@0
            displayName: Helm Install Upgrade
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              command: upgrade
              chartType: filepath
              chartPath: $(System.ArtifactsDirectory)/chart/$(chartName)-$(tag).tgz
              releaseName: helm-quiz-service
              install: true
              waitForExecution: false
              overrideValues: image.tag=$(tag)
              namespace: dev

  - stage: Qa
    dependsOn:
      - Dev
    jobs:
      - job: Deploy
        displayName: "Deploy Qa"
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "download chart artifacts"
            inputs:
              artifact: Chart
              path: "$(System.ArtifactsDirectory)/chart"
          - bash: |
              pwd
              cd $(System.ArtifactsDirectory)/chart
              ls
          - task: HelmDeploy@0
            displayName: Helm Install Upgrade
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              command: upgrade
              chartType: filepath
              chartPath: $(System.ArtifactsDirectory)/chart/$(chartName)-$(tag).tgz
              releaseName: helm-quiz-service
              install: true
              waitForExecution: false
              overrideValues: image.tag=$(tag)
              namespace: qa

          # - bash: |
          #     pwd
          #     cd $(System.DefaultWorkingDirectory)/quiz-service/chart
          #     ls

          # - bash: |
          #       # still experimental in Helm v3
          #       export HELM_EXPERIMENTAL_OCI=1

          #       # Helm needs to login to ACR
          #       echo '$(registryPassword)' | helm registry login $(containerRegistry) \
          #         --username $(registryLogin) \
          #         --password-stdin

          #       # Save the Helm chart locally - version tag comes from chart version
          #       # A local save is required before you can push the chart to ACR
          #       chartVersion=`helm chart save space/quiz-service-real $(containerRegistry)/helm/$(imageRepository) | grep version | awk -F ': ' '{print $2}'`

          #       # Push the chart
          #       # Note: if a chart with the same version already exists, it will be overwritten
          #       #       this might not be the behavior you want
          #       helm chart push $(containerRegistry)/helm/$(imageRepository):$chartVersion
          #       helm push

          #       # save the Helm chart version and image tag to a JSON file to publish as an artifact
          #       # echo $(jq -n --arg chartVersion "$chartVersion" --arg imgVersion "$(imageTag)" '{chartVersion: $chartVersion, imgVersion: $imgVersion}') > $(build.artifactStagingDirectory)/variables.json
          #   failOnStderr: true
          #   name: helmPush
          #   displayName: 'helm chart push'

          # - publish: $(build.artifactStagingDirectory)
          #     artifact: build-artifact

          # - task: HelmDeploy@0
          #   inputs:
          #     command: package
          #     chartPath: $(chartPath)
          #     chartVersion: $(Build.SourceBranchName)
          #     arguments: '--app-version $(Build.SourceBranchName)'
          #   displayName: 'helm package'
          #   failOnStderr: true

      # - job: Deploy
      #   dependsOn:
      #     - Build
      #   steps:
      #     - task: KubernetesManifest@0
      #       displayName: Deploy to Kubernetes cluster
      #       inputs:
      #         action: deploy
      #         namespace: ${{variables.k8sNamespace}}
      #         kubernetesServiceConnection: $(kubernetesServiceConnection)
      #         manifests: |
      #           $(System.DefaultWorkingDirectory)/quiz-service/aks/manifests/deployment.yml
      #           $(System.DefaultWorkingDirectory)/quiz-service/aks/manifests/service.yml
      #           $(System.DefaultWorkingDirectory)/quiz-service/aks/manifests/service-lb.yml
      #         containers: |
      #           $(containerRegistry)/$(imageRepository):$(tag)
# bash: |
#     # still experimental in Helm v3
#     export HELM_EXPERIMENTAL_OCI=1

#     # Helm needs to login to ACR
#     echo '$(registryPassword)' | helm registry login $(registryServerName) \
#       --username $(registryLogin) \
#       --password-stdin

#     # Save the Helm chart locally - version tag comes from chart version
#     # A local save is required before you can push the chart to ACR
#     chartVersion=`helm chart save charts/go-template $(registryServerName)/helm/$(projectName) | grep version | awk -F ': ' '{print $2}'`

#     # Push the chart
#     # Note: if a chart with the same version already exists, it will be overwritten
#     #       this might not be the behavior you want
#     helm chart push $(registryServerName)/helm/$(projectName):$chartVersion

#     # save the Helm chart version and image tag to a JSON file to publish as an artifact
#     echo $(jq -n --arg chartVersion "$chartVersion" --arg imgVersion "$(imageTag)" '{chartVersion: $chartVersion, imgVersion: $imgVersion}') > $(build.artifactStagingDirectory)/variables.json
#   failOnStderr: true
#   name: helmPush
#   displayName: 'helm chart push'
# - publish: $(build.artifactStagingDirectory)
#   artifact: build-artifact

# - bash: |
#     helm package --app-version $(tag) $(System.DefaultWorkingDirectory)/quiz-service/chart
